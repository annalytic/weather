{"version":3,"sources":["components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","location","current","react_default","a","createElement","className","concat","name","country","src","condition","icon","alt","text","temp_c","App","state","data","input","found","handleInput","e","_this","setState","target","value","handleSubmit","preventDefault","fetchData","search","_this2","this","url","fetch","then","res","ok","console","log","json","catch","error","weather","_this$state","components_Weather","onSubmit","type","placeholder","onChange","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NAkBeA,MAhBf,SAAiBC,GAAO,IAEpBC,EAEED,EAFFC,SACAC,EACEF,EADFE,QAGF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,aAAAE,OAAQN,EAASO,KAAjB,MAAAD,OAA0BN,EAASQ,UACnCN,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAQS,UAAUC,KAAMC,IAAKX,EAAQS,UAAUG,OACzDX,EAAAC,EAAAC,cAAA,SAAIH,EAAQS,UAAUG,MACtBX,EAAAC,EAAAC,cAAA,eAAAE,OAAUL,EAAQa,OAAlB,aCiESC,6MAxEbC,MAAQ,CACNC,KAAM,GACNC,MAAO,GACPC,OAAO,KAwBTC,YAAc,SAACC,GACbC,EAAKC,SAAS,CACZL,MAAOG,EAAEG,OAAOC,WAIpBC,aAAe,SAACL,GACdA,EAAEM,iBACFL,EAAKM,UAAUN,EAAKN,MAAME,iFA7BlBW,GAAQ,IAAAC,EAAAC,KACVC,EAAG,+EAAA1B,OAAkFuB,GAC3FI,MAAMD,GACHE,KAAK,SAAAC,GACJ,OAAIA,EAAIC,IACNC,QAAQC,IAAI,OACZR,EAAKP,SAAS,CAAEN,KAAM,GAAIE,OAAO,IAC1BgB,EAAII,SAEXT,EAAKP,SAAS,CAAEN,KAAM,GAAIE,OAAO,SACjCkB,QAAQC,IAAI,cAIfJ,KAAK,SAAAjB,GACJa,EAAKP,SAAS,CAAEN,SAChBoB,QAAQC,IAAIrB,KAEbuB,MAAM,SAAAC,GAAK,OAAIJ,QAAQI,MAAMA,sCAczB,IAEHC,EAFGC,EACwBZ,KAAKf,MAA5BC,EADD0B,EACC1B,KAAMC,EADPyB,EACOzB,MAAOC,EADdwB,EACcxB,MAarB,OAVIF,IACFyB,EAAUxC,EAAAC,EAAAC,cAACwC,EAAY3B,GACvBoB,QAAQC,IAAI,YAGTnB,IACHuB,EAAUxC,EAAAC,EAAAC,cAAA,yCACViC,QAAQC,IAAI,cAIZpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QACEyC,SAAUd,KAAKL,cAEfxB,EAAAC,EAAAC,cAAA,SACE0C,KAAK,OACLC,YAAY,gCACZtB,MAAOP,EACP8B,SAAUjB,KAAKX,cAEjBlB,EAAAC,EAAAC,cAAA,UAAQ0C,KAAK,UAAb,WAGFJ,UAnEUO,aCOEC,QACW,cAA7BC,OAAOnD,SAASoD,UAEe,UAA7BD,OAAOnD,SAASoD,UAEhBD,OAAOnD,SAASoD,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.15cabb49.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Weather(props) {\n  const {\n    location,\n    current\n  } = props;\n\n  return (\n    <div className=\"weather\">\n      <h1>{`${location.name}, ${location.country}`}</h1>\n      <img src={current.condition.icon} alt={current.condition.text}/>\n      <p>{current.condition.text}</p>\n      <span>{`${current.temp_c} Â°C`}</span>\n\n    </div>\n  );\n}\nexport default Weather;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Weather from './components/Weather';\n\nclass App extends Component {\n  state = {\n    data: '',\n    input: '',\n    found: true\n  }\n\n  fetchData(search) {\n    const url = `https://api.apixu.com/v1/current.json?key=2b5a0fb89f0d45029a5203614182911&q=${search}`;\n    fetch(url)\n      .then(res => {\n        if (res.ok) {\n          console.log('200');\n          this.setState({ data: '', found: true });\n          return res.json();\n        } else {\n          this.setState({ data: '', found: false });\n          console.log('not 200');\n          return;\n        }\n      })\n      .then(data => {\n        this.setState({ data });\n        console.log(data);\n      })\n      .catch(error => console.error(error));\n  }\n\n  handleInput = (e) => {\n    this.setState({\n      input: e.target.value\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.fetchData(this.state.input);\n  }\n\n  render() {\n    const { data, input, found } = this.state;\n    let weather;\n\n    if (data) {\n      weather = <Weather {...data} />;\n      console.log('weather');\n    }\n\n    if (!found) {\n      weather = <p>Not found. Try a new search.</p>\n      console.log('not found');\n    }\n\n    return (\n      <div className=\"App\">\n        <form\n          onSubmit={this.handleSubmit}\n        >\n          <input\n            type=\"text\"\n            placeholder=\"Search for city, country etc.\"\n            value={input}\n            onChange={this.handleInput}\n          />\n          <button type=\"submit\">Search</button>\n        </form>\n\n       {weather}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}